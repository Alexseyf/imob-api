generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Imovel {
  id           Int           @id @default(autoincrement())
  area         Int           @db.Integer
  valor        Decimal       @db.Decimal(10, 2)
  endereco     String        @db.VarChar(255)
  bairro       String        @db.VarChar(60)
  foto         String        @db.VarChar(255)
  quarto       Int           @default(0) @db.Integer
  banheiro     Int           @default(0) @db.Integer
  cozinha      Int           @default(0) @db.Integer
  sala         Int           @default(0) @db.Integer
  garagem      Int           @default(0) @db.Integer
  suite        Int           @default(0) @db.Integer
  areaServico  Int           @default(0) @db.Integer
  tipoImovel   TipoImovel
  isArquivado  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  usuarioId    Int
  usuario      Usuario       @relation(fields: [usuarioId], references: [id])
  agendamentos Agendamento[]

  @@map("imoveis")
}

enum TipoImovel {
  CASA
  APARTAMENTO
  CHACARA
  COMERCIAL
  RURAL
}

model Usuario {
  id                  Int           @id @default(autoincrement())
  nome                String        @db.VarChar(60)
  email               String        @unique @db.VarChar(40)
  senha               String        @db.VarChar(60)
  isArquivado         Boolean       @default(false)
  createdAt           DateTime      @default(now())
  resetToken          String?
  resetTokenExpires   DateTime?
  updatedAt           DateTime      @updatedAt
  tipoUsuario         TipoUsuario
  logs                Log[]
  imoveis             Imovel[]
  adminAgendamentos   Agendamento[] @relation("adminAgendamento")
  clienteAgendamentos Agendamento[] @relation("clienteAgendamento")

  @@map("usuarios")
}

enum TipoUsuario {
  ADMIN
  CLIENTE
  SUPORTE
}

model Log {
  id          Int         @id @default(autoincrement())
  descricao   String      @db.VarChar(60)
  complemento String      @db.VarChar(255)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  usuarioId   Int
  usuario     Usuario     @relation(fields: [usuarioId], references: [id])
  usuarioTipo TipoUsuario

  @@map("logs")
}

model Agendamento {
  id        Int      @id @default(autoincrement())
  data      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminId   Int
  admin     Usuario  @relation(fields: [adminId], references: [id], name: "adminAgendamento")
  clienteId Int
  cliente   Usuario  @relation(fields: [clienteId], references: [id], name: "clienteAgendamento")
  imovelId  Int
  imovel    Imovel   @relation(fields: [imovelId], references: [id])

  @@map("agendamentos")
}
